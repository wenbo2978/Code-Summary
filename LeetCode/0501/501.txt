/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorderTraversal(TreeNode* root, int& pre, int& ct, int& mt, vector<int>& res){
        if(root == nullptr){
            return;
        }
        inorderTraversal(root->left, pre, ct, mt, res);
        if(pre == 1e4+1){
            pre = root->val;
        }else{
            if(pre == root->val){
                ct ++;
            }else{
                if(ct == mt){
                    res.push_back(pre);
                }else if(ct > mt){
                    res.clear();
                    res.push_back(pre);
                }
                mt = max(ct, mt);
                ct = 1;
                pre = root->val;
            }
        }
        inorderTraversal(root->right, pre, ct, mt, res);
    }
    vector<int> findMode(TreeNode* root) {
        vector<int> res;
        int pre = 1e4 + 1, ct = 1, mt = 1;
        inorderTraversal(root, pre, ct, mt, res);
        if(ct == mt){
            res.push_back(pre);
        }else if(ct > mt){
            res.clear();
            res.push_back(pre);
        }
        return res;
    }
};
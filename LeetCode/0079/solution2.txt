class Solution {
public:
    vector<pair<int, int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};    
    bool exist(vector<vector<char>>& board, string word) {
        int first, last;
        first = last = 0;
        vector<bool> visited(board.size()*board[0].size());
        for (int i=0; i<board.size(); i++) {
            for (int j=0; j<board[0].size(); j++) {                
                if (board[i][j] == word[0]) {
                    first++;
                }
                else if (board[i][j] == word.back()) {
                    last++;
                }
            }
        }
        if (last < first) {
            reverse(word.begin(), word.end());
        }
        for (int i=0; i<board.size(); i++) {
            for (int j=0; j<board[0].size(); j++) {                
                if (dfs(board, i, j, word, 0, visited)) {
                    return true;
                }
            }
        }
        return false;
    }

    bool dfs(vector<vector<char>>& board, int i, int j, string &word, int cur, vector<bool> &visited) {
        if (visited[i*board[0].size()+j]) {
            return false;
        }        
        if (board[i][j] != word[cur]) {
            return false;
        }
        if (cur == word.length()-1) {
            return true;
        }
        visited[i*board[0].size()+j] = true;
        for (auto dir : dirs) {
            int next_i = i+dir.first;
            int next_j = j+dir.second;
            if (next_i < 0 || next_i >= board.size() || next_j < 0 || next_j >= board[0].size()) {
                continue;
            }
            if (dfs(board, next_i, next_j, word, cur+1, visited)) {
                return true;
            }
        }
        visited[i*board[0].size()+j] = false;
        return false;
    }
};
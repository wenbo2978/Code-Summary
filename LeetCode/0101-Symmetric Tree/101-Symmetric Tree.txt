/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        stack<TreeNode*> l,r;
        if(root->left != nullptr)
            l.push(root->left);
        if(root->right != nullptr)
            r.push(root->right);
        while(!l.empty() && !r.empty()){
            TreeNode* ll = l.top();
            TreeNode* rr = r.top();
            l.pop();
            r.pop();
            if(ll->val != rr->val){
                return false;
            }
            if(ll->left != nullptr && rr->right != nullptr){
                l.push(ll->left);
                r.push(rr->right);
            }else if(ll->left == nullptr && rr->right == nullptr){
                ;
            }else{
                return false;
            }
            if(ll->right != nullptr && rr->left != nullptr){
                l.push(ll->right);
                r.push(rr->left);
            }else if(ll->right == nullptr && rr->left == nullptr){
                ;
            }else{
                return false;
            }
        }

        if(l.empty() && r.empty()){
            return true;
        }else{
            return false;
        }
        return true;
    }
};
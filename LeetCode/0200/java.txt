class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] path = new int[m][n];
        int islands = 0;
        for(int i = 0; i < m; i ++){
            for(int j = 0; j < n; j ++){
                if(path[i][j] == 0 && grid[i][j] == '1'){
                    islands ++;
                    dfs(grid, path, i + 1, j, m, n);
                    dfs(grid, path, i - 1, j, m, n);
                    dfs(grid, path, i, j + 1, m, n);
                    dfs(grid, path, i, j - 1, m, n);
                }
            }
        }
        return islands;
    }

    void dfs(char[][] grid, int[][] path, int row, int col, int m, int n){
        if(row < 0 || row >= m || col < 0 || col >= n)
            return;
        if(path[row][col] == 1)
            return;
        if(grid[row][col] == '1'){
            path[row][col] = 1;
            dfs(grid, path, row + 1, col, m, n);
            dfs(grid, path, row - 1, col, m, n);
            dfs(grid, path, row, col + 1, m, n);
            dfs(grid, path, row, col - 1, m, n);
        }
    }
        
}
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int postOrderTraver(TreeNode* root, int& res){
        int value = root->val;
        int leftNum = 0, rightNum = 0;
        if(root->left != nullptr){
            leftNum = postOrderTraver(root->left, res);
        }

        if(root->right != nullptr){
            rightNum = postOrderTraver(root->right, res);
        }
        
        if(root->left != nullptr){
            root->val += root->left->val;
        }

        if(root->right != nullptr){
            root->val += root->right->val;
        }

        int average = root->val / (leftNum + rightNum + 1);
        if(average == value){
            res ++;
        }
        return leftNum + rightNum + 1;
    }

    int averageOfSubtree(TreeNode* root) {
        int res = 0;
        int numberOfNodes = postOrderTraver(root, res);
        return res;
    }
};
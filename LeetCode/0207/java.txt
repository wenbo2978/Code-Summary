class Solution {
    
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] adj = new List[numCourses];
        int[] indegree = new int[numCourses];
        List<Integer> ans = new ArrayList<>();
        for(int i = 0; i < prerequisites.length; i ++){
            int course = prerequisites[i][0];
            int pre = prerequisites[i][1];
            if(adj[pre] == null){
                adj[pre] = new ArrayList<>();
            }
            adj[pre].add(course);
            indegree[course] ++;
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < numCourses; i ++){
            if(indegree[i] == 0){
                q.offer(i);
            }
        }

        while(!q.isEmpty()){
            int current = q.poll();
            ans.add(current);
            if(adj[current] != null){
                for(int next : adj[current]){
                    indegree[next] --;
                    if(indegree[next] == 0){
                        q.offer(next);
                    }
                }
            }
        }
        return ans.size() == numCourses;

    }
}
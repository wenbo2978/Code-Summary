class Solution {
    public int getMaximumGold(int[][] grid) {
        int[] ans = new int[1];
        ans[0] = 0;
        int res = 0;
        for(int i = 0; i < grid.length; i ++){
            for(int j = 0; j < grid[0].length; j ++){
                if(grid[i][j] != 0){
                    //grid[i][j] = (-1) * grid[i][j];
                    dfs(grid, i, j, ans);
                    res = Math.max(res, ans[0]);
                    ans[0] = 0;
                    //grid[i][j] = (-1) * grid[i][j];
                }
            }
        }
        return res;
    }

    public void dfs(int[][] grid, int i, int j, int[] ans){
            if(i < 0 || i > grid.length - 1 || j < 0 || j > grid[0].length - 1 || grid[i][j] <= 0)
                return;
            ans[0] += grid[i][j];
            grid[i][j] = grid[i][j] * (-1);
            int res = 0;
            int[] f = new int[1];
            f[0] = 0;

            dfs(grid, i + 1, j, f);
            res = Math.max(f[0], res);
            f[0] = 0;
            dfs(grid, i - 1, j, f);
            res = Math.max(f[0], res);
            f[0] = 0;
            dfs(grid, i, j + 1, f);
            res = Math.max(f[0], res);
            f[0] = 0;
            dfs(grid, i, j - 1, f);
            res = Math.max(f[0], res);
            f[0] = 0;

            ans[0] += res;

            grid[i][j] = grid[i][j] * (-1);
    }
}
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        map<char, string> m1;
        map<string, char> m2;
        int i = 0, j = 0;
        for(i = 0, j = 0; j < pattern.size(), i < s.size(); j ++, i ++){
            string tmp = "";
            while(s[i] != ' ' && i < s.size()){
                tmp.push_back(s[i]);
                i ++;
            }
            if(m1.find(pattern[j]) == m1.end() && m2.find(tmp) == m2.end()){
                m1[pattern[j]] = tmp;
                m2[tmp] = pattern[j];
            }else if(m1.find(pattern[j]) != m1.end() && m2.find(tmp) != m2.end()){
                if(m1[pattern[j]] != tmp){
                    //printf("1\n");
                    return false;
                }
                    
            }else{
                //printf("2\n");
                return false;
            }
        }
        
        if(i < s.size() || j < pattern.size()){
            //printf("%d %d\n", i, j);
            return false;
        }
            
        return true;
    }
};
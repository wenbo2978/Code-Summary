class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        //System.out.println(s.substring(2,1));
        backtrack(s, 0, new ArrayList<>(), ans);
        return ans;
    }

    public void backtrack(String s, int start, List<String> path, List<List<String>> ans){
        if (start == s.length()) {
            ans.add(new ArrayList<>(path));
            return;
        }
        for (int end = start + 1; end <= s.length(); end++) {
            // If the current substring is a palindrome, add it to the current path
            if (isPalindrome(s.substring(start, end))) {
                path.add(s.substring(start, end));
                // Recur to find other partitions
                backtrack(s, end, path, ans);
                // Backtrack to explore other partitions
                path.remove(path.size() - 1);
            }
        }
    }

    public boolean isPalindrome(String s){
        int st = 0, ed = s.length() - 1;
        while(st < ed){
            if(s.charAt(st) != s.charAt(ed)){
                return false;
            }else{
                st ++;
                ed --;
            }
        }
        return true;
    }
}
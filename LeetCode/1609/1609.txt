/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        queue<TreeNode*> q;
        int index = 0;
        q.push(root);
        int now = -1;
        int pre = -1;
        TreeNode* tmp;
        bool isEOT = true;
        while(!q.empty()){
            int n = q.size();
            now = -1, pre = -1;
            while(n-- > 0){
                tmp = q.front();
                q.pop();
                if(tmp->left != nullptr)
                    q.push(tmp->left);
                if(tmp->right != nullptr)
                    q.push(tmp->right);
                //cout << tmp->val << endl;
                if(index % 2 == 0){
                    if(now == -1){
                        now = tmp->val;
                    }else{
               
                        pre = now;
                        now = tmp->val;
                   
                        if(now <= pre){
                            return false;
                        }
                    }
                    if(now % 2 == 0)
                        return false;
                }else{
                    if(now == -1){
                        now = tmp->val;
                    }else{
       
                        pre = now;
                        now = tmp->val;
                  
                        if(now >= pre){
                            return false;
                        }
                    }
                    if(now % 2 != 0)
                        return false;
                }

            }
            index ++;
        }
        return true;
    }
};
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode addOneRow(TreeNode root, int val, int depth) {
        if(depth == 1){
            TreeNode newRoot = new TreeNode(val);
            newRoot.left = root;
            newRoot.right = null;
            return newRoot;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int level = 1;
        while(!queue.isEmpty()){
            int length = queue.size();
            //System.out.println(length);
            level ++;
            while(length > 0){
                TreeNode tmp = queue.poll();
                if(level == depth){
                    TreeNode newLeft = new TreeNode(val);
                    TreeNode newRight = new TreeNode(val);
                    if(tmp.left != null){
                        TreeNode tp = tmp.left;
                        tmp.left = newLeft;
                        newLeft.right = null;
                        newLeft.left = tp;
                        //System.out.printf("111");
                        //System.out.print("  " +tmp.left.left.val  +"   ");
                        queue.offer(newLeft);
                    }else{
                        tmp.left = newLeft;
                        newLeft.right = null;
                        newLeft.left = null;
                        queue.offer(newLeft);
                    }
                    if(tmp.right != null){
                        TreeNode tp = tmp.right;
                        tmp.right = newRight;
                        newRight.left = null;
                        newRight.right = tp;
                        queue.offer(tmp.right);
                    }else{
                        tmp.right = newRight;
                        newRight.right = null;
                        newRight.left = null;
                        queue.offer(tmp.right);
                    }
                }else{
                    if(tmp.left != null){
                        queue.offer(tmp.left);
                    }
                    if(tmp.right != null){
                        queue.offer(tmp.right);
                    }
                }
                
                //System.out.print(tmp.val + " ");
                length--;
            }
            //System.out.println("");
        }
        return root;
    }
}
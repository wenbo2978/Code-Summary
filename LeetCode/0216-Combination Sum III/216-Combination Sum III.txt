class Solution {
public:


    void backTrack(int k, int n, int index, int tmpSum, int times, 
        vector<int> &numSet, vector<int> &selected, vector<vector<int>> &ans){
        
        //printf("%d\n", tmpSum);
        if(tmpSum == n && times == k){
            vector<int> tp;
            for(int i = 0; i < selected.size(); i ++){
                if(selected[i] == 1){
                    tp.push_back(numSet[i]);
                }
            }
            ans.push_back(tp);
        }
        if(tmpSum < n && times < k && index < 9){
            selected[index] = 1;
            tmpSum += numSet[index];
            if(tmpSum <= n)
                backTrack(k, n, index + 1, tmpSum, times + 1, numSet, selected, ans);
            //printf("exit\n");
            selected[index] = 0;
            tmpSum -= numSet[index];
            backTrack(k, n, index + 1, tmpSum, times, numSet, selected, ans);
        }
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> numSet = {9, 8, 7, 6, 5, 4, 3, 2, 1};
        vector<int> selected(9);
        backTrack(k, n, 0, 0, 0, numSet, selected, ans);
        return ans;
    }
};
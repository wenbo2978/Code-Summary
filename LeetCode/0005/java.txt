class Solution {
    public String longestPalindrome(String s) {
        int len = s.length();
        int[][] path = new int[len][len];
        for(int i = 0; i < len; i ++){
            path[i][i] = 1;
        }
        for(int i = len - 1; i >= 0; i --){
            for(int j = i + 1; j < len; j ++){
                if(j - i == 1){
                    if(s.charAt(i) == s.charAt(j)){
                        path[i][j] = 1;
                    }
                }else{
                    if(path[i + 1][j - 1] == 1 && s.charAt(i) == s.charAt(j)){
                        path[i][j] = 1;
                    }
                }
                //System.out.println("i: " + i + ", j: " + j + ", path: " + path[i][j]);
            }
        }
        int st = 0, ed = 0;
        for(int i = 0; i < len; i ++){
            for(int j = i; j < len; j ++){
                if(path[i][j] == 1){
                    if(ed - st + 1 < j - i + 1){
                        st = i;
                        ed = j;
                    }
                }
            }
        }
        return s.substring(st, ed + 1);
    }
}
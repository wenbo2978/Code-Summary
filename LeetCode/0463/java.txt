class Solution {
    public int islandPerimeter(int[][] grid) {
        int row = grid.length, col = grid[0].length;
        int startR = -1, startC = -1;
        int[] ans = new int[1];
        ans[0] = 0;
        for(int i = 0; i < row; i ++){
            for(int j = 0; j < col; j ++){
                if(grid[i][j] == 1){
                    startR = i;
                    startC = j;
                    break;
                }
            }
        }

        deepSearch(grid, row, col, startR, startC, ans);

        return ans[0];
    }

    public void deepSearch(int[][] grid, int row, int col, int i, int j, int[] ans){
        if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == -1 || grid[i][j] == 0)
            return;
        if(i - 1 < 0)
            ans[0] ++;
        else{
            if(grid[i - 1][j] == 0)
                ans[0]++;
        }
        if(j - 1 < 0)
            ans[0] ++;
        else{
            if(grid[i][j - 1] == 0)
                ans[0]++;
        }
        if(i + 1 >= row)
            ans[0] ++;
        else{
            if(grid[i + 1][j] == 0)
                ans[0]++;
        }
        if(j + 1 >= col)
            ans[0] ++;
        else{
            if(grid[i][j + 1] == 0)
                ans[0]++;
        }
        grid[i][j] = -1;
        deepSearch(grid, row, col, i - 1, j, ans);
        deepSearch(grid, row, col, i + 1, j, ans);
        deepSearch(grid, row, col, i, j - 1, ans);
        deepSearch(grid, row, col, i, j + 1, ans);
    }
   
}
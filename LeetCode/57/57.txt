class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        vector<vector<int>> res;
        
        int isInsert = -1;
        int is_non_overlop = -1;
        int n = intervals.size();
        int m = 0;
        for(int i = 0; i < n; i ++){
            if(isInsert == -1){
                if(newInterval[0] > intervals[i][1]){
                    res.push_back({intervals[i][0],intervals[i][1]});
                    m ++;
                }else if(newInterval[1] < intervals[i][0]){
                    res.push_back({newInterval[0],newInterval[1]});
                    res.push_back({intervals[i][0],intervals[i][1]});
                    m +=2;
                    isInsert = 1;
                }else{
                    res.push_back({min(intervals[i][0], newInterval[0]),max(intervals[i][1], newInterval[1])});
                    m ++;
                    //cout << res[m - 1][0] << ", "<< res[m - 1][1] <<endl;
                    isInsert = 1;
                }
            }else{
                if(is_non_overlop == -1){
                    if(res[m - 1][1] < intervals[i][0]){
                        is_non_overlop = 1;
                        res.push_back({intervals[i][0],intervals[i][1]});
                        m ++;
                        //cout << res[m - 1][0] << ", "<< res[m - 1][1] <<endl;
                    }else{
                        res[m - 1][1] = max(intervals[i][1], res[m - 1][1]);
                        //cout << res[m - 1][0] << ", "<< res[m - 1][1] <<endl;
                    }
                }else{
                    res.push_back({intervals[i][0],intervals[i][1]});
                    m ++;
                    //cout << res[m - 1][0] << ", "<< res[m - 1][1] <<endl;
                }
            }
        }
        if(isInsert == -1){
            res.push_back({newInterval[0],newInterval[1]});
        }
        return res;
    }
};
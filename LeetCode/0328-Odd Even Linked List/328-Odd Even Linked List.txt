/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if(head == nullptr || head -> next == nullptr)
            return head;
        int count = 0;
        ListNode* ans = new ListNode();
        ans->next = head->next;
        ListNode* firstOdd = head;
        ListNode* firstEven = head->next;
        while(firstEven != nullptr&&firstEven->next != nullptr){
            //if(count % 2 == 0){
                ListNode* aim = firstEven->next;
                firstOdd -> next = aim;
                firstEven -> next = aim -> next;
                aim -> next = ans -> next;
                firstEven = firstEven -> next;
                firstOdd = firstOdd->next;
            /*}else{
                firstEven = firstEven->next;
            }
            count ++;*/
        }
        return head;
    }
};
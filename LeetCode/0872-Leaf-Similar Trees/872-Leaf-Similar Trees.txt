/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> r1, r2;
        stack<TreeNode*> st;
        st.push(root1);
        while(!st.empty()){
            TreeNode* tp= st.top();
            st.pop();
            if(tp->right == nullptr && tp -> left == nullptr){
                r1.push_back(tp->val);
            }else{
                if(tp->right != nullptr)
                    st.push(tp->right);
                if(tp->left != nullptr)
                    st.push(tp->left);
            }
        }

        st.push(root2);
        while(!st.empty()){
            TreeNode* tp= st.top();
            st.pop();
            if(tp->right == nullptr && tp -> left == nullptr){
                r2.push_back(tp->val);
            }else{
                if(tp->right != nullptr)
                    st.push(tp->right);
                if(tp->left != nullptr)
                    st.push(tp->left);
            }
        }
        if(r1.size() != r2.size())
            return false;
        for(int i = 0; i < r1.size(); i ++){
            //printf("%d %d\n", r1[i], r2[i]);
            if(r1[i] != r2[i])
                return false;
        }
        return true;
    }
};
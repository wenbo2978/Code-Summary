class Solution {
public:

    void bfsSearch(vector<vector<char>>& maze, vector<int>& entrance, int &step){
        queue<vector<int>> q;
        vector<int> point;
        q.push(entrance);
        while(!q.empty()){
            point = q.front();
            maze[point[0]][point[1]] = '-';
            q.pop();
            if(point[0] + 1 < maze.size()){
                if(maze[point[0] + 1][point[1]] == '.'){
                    if(point[0] + 1 == maze.size() - 1 || point[1] == 0 || point[1] == maze[0].size() - 1){
                        step = point[2] + 1;
                        break;
                    }else{
                        vector<int> tmp(3);
                        tmp[0] = point[0] + 1;
                        tmp[1] = point[1];
                        tmp[2] = point[2] + 1;
                        maze[tmp[0]][tmp[1]] = '-';
                        q.push(tmp);
                    }
                }
            }
            if(point[0] - 1 >= 0){
                if(maze[point[0] - 1][point[1]] == '.'){
                    if(point[0] - 1 == 0 || point[1] == 0 || point[1] == maze[0].size() - 1){
                        step = point[2] + 1;
                        break;
                    }else{
                        vector<int> tmp(3);
                        tmp[0] = point[0] - 1;
                        tmp[1] = point[1];
                        tmp[2] = point[2] + 1;
                        maze[tmp[0]][tmp[1]] = '-';
                        q.push(tmp);
                    }
                }
            }

            if(point[1] + 1 < maze[0].size()){
                if(maze[point[0]][point[1] + 1] == '.'){
                    if(point[1] + 1 == maze[0].size() - 1 || point[0] == 0 || point[0] == maze.size() - 1){
                        step = point[2] + 1;
                        break;
                    }else{
                        vector<int> tmp(3);
                        tmp[0] = point[0];
                        tmp[1] = point[1] + 1;
                        tmp[2] = point[2] + 1;
                        maze[tmp[0]][tmp[1]] = '-';
                        q.push(tmp);
                    }
                }
            }

            if(point[1] - 1 >= 0){
                if(maze[point[0]][point[1] - 1] == '.'){
                    if(point[1] - 1 == 0 || point[0] == 0 || point[0] == maze.size() - 1){
                        step = point[2] + 1;
                        break;
                    }else{
                        vector<int> tmp(3);
                        tmp[0] = point[0];
                        tmp[1] = point[1] - 1;
                        tmp[2] = point[2] + 1;
                        maze[tmp[0]][tmp[1]] = '-';
                        q.push(tmp);
                    }
                }
            }
        }
    }

    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int row = maze.size();
        int col = maze[0].size();
        entrance.push_back(0);
        int ans = -1;
        bfsSearch(maze, entrance, ans);
        return ans;
    }
};
/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* construct(vector<vector<int>>& grid) {
        Node* root;
        int n = grid.size();
        int v = grid[0][0];
        bool isleaf = true;
        for(int i = 0; i < n; i ++){
            for(int j = 0; j < n; j ++){
                if(grid[i][j] != v){
                    isleaf = false;
                    break;
                }
            }
        }
        if(isleaf){
            root = new Node(v, isleaf);
        }else{
            root = new Node(v, isleaf);
            root->topLeft = buildTree(grid, 0, 0, n / 2, n / 2);
            root->topRight = buildTree(grid, 0, n / 2, n / 2, n);
            root->bottomLeft = buildTree(grid, n / 2, 0, n, n / 2);
            root->bottomRight = buildTree(grid, n / 2, n / 2, n, n);
        }
        return root;
    }

    Node* buildTree(vector<vector<int>>& grid, int si, int sj, int ei, int ej){
        Node* root;
        int v = grid[si][sj];
        bool isleaf = true;
        for(int i = si; i < ei; i ++){
            for(int j = sj; j < ej; j ++){
                if(grid[i][j] != v){
                    isleaf = false;
                    break;
                }
            }
        }
        if(isleaf){
            root = new Node(v, isleaf);
        }else{
            root = new Node(v, isleaf);
            root->topLeft = buildTree(grid, si, sj, (ei + si) / 2, (ej + sj) / 2);
            root->topRight = buildTree(grid, si, (ej + sj) / 2, (ei + si) / 2, ej);
            root->bottomLeft = buildTree(grid, (si + ei) / 2, sj, ei, (ej + sj) / 2);
            root->bottomRight = buildTree(grid, (si + ei) / 2, (sj + ej) / 2, ei, ej);
        }
        return root;
    }
};
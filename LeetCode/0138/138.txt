/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == nullptr)
            return nullptr;
        Node* res = new Node(0);
        res -> next = head;
        while(head != nullptr){
            /*printf("%d ", head -> val);
            if(head->random != nullptr)
                printf("%d", head->random->val);
            printf("\n");
            head = head->next;*/
            Node* tmp = new Node(head->val);
            tmp->next = head->next;
            head -> next = tmp;
            head = tmp -> next;
        }
        Node* head2 = res-> next;
        while(head2 != nullptr){
            if(head2 -> random != nullptr)
                head2 -> next -> random = head2 -> random -> next;
            head2 = head2-> next->next;
        }
        Node* res2 = res -> next -> next;
        res = res -> next;
        while(res != nullptr && res -> next != nullptr){
            Node* swap = res -> next;
            res -> next = swap -> next;
            if(swap -> next != nullptr)
                swap -> next = res -> next -> next;
            res = res -> next;

        }
        return res2;

    }
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void arrayCovertToTree(TreeNode* &root, vector<int>& nums, int st, int ed){
        if(st > ed){
            root = nullptr;
            return;
        }

        if(st == ed){
            root->val = nums[st];
            return;
        }
        root->val = nums[(st + ed) / 2];
        root->left = new TreeNode();
        arrayCovertToTree(root->left, nums, st, (st + ed) / 2 - 1);
        root->right = new TreeNode();
        arrayCovertToTree(root->right, nums, (st + ed) / 2 + 1, ed);

    }

    TreeNode* sortedArrayToBST(vector<int>& nums) {
        TreeNode* root = new TreeNode();
        arrayCovertToTree(root, nums, 0, nums.size() - 1);
        return root;
    }
};
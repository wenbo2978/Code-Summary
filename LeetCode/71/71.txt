class Solution {
public:
    string simplifyPath(string path) {
        int n = path.size();
        string res = "";
        int l = 0;
        int s = 0;
        int o = 0;
        for(int i = 0; i < n; i ++){
            if(path[i] == '/'){
                if(l > 0){
                    if(o > 0 || s > 2){
                        res.push_back(path[i]);
                        l ++;
                    }else if(s == 1){
                        res.pop_back();
                        l --;
                    }else if(s == 2){
                        res.pop_back();
                        res.pop_back();
                        l -= 2;
                        if(l == 1){
                            ;
                        }else{
                            res.pop_back();
                            l --;
                            while(res[l - 1] != '/'){
                                res.pop_back();
                                l --;
                            }
                        }
                    }else{
                        ;
                    }
                }else{
                    res.push_back(path[i]);
                    l ++;
                }
                
                s = 0;
                o = 0;
            }else if(path[i] == '.'){
                s ++;
                res.push_back(path[i]);
                l ++;
            }else{
                o ++;
                res.push_back(path[i]);
                l ++;
            }
        }
        //printf("%d %d\n", s, o);
        if(o == 0){
            if(s == 1){
                res.pop_back();
                l --;
            }else if(s == 2){
                res.pop_back();
                cout << res.size() << endl;
                res.pop_back();
                l -= 2;
                if(l > 1){
                    res.pop_back();
                    l -= 1;
                    while(res[l - 1] != '/'){
                        res.pop_back();
                        l --;
                    }
                }
            }
        }
        if(res.size() > 1 && res[l - 1] == '/'){
            res.pop_back();
        }
        
        return res;
    }
};
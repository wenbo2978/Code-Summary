/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int pairSum(ListNode* head) {
        int n = 0;
        ListNode* l = new ListNode();
        ListNode* m = new ListNode();
        ListNode* mh = new ListNode();
        l = head;
        m = head;
        while(l!=nullptr){
            n ++;
            l = l->next;
        }
        n = n /2;
        for(int i = 0; i < n; i ++){
            m = m -> next;
        }
        mh -> next = m;
        while(m->next != nullptr){
            ListNode* nt = m -> next;
            m -> next = nt->next;
            nt->next=mh->next;
            mh->next=nt;
            /*if(m->next == nullptr){
                printf("11111m -> next = nullptr\n");
                break;
            }*/   
        }
        int sum = 0;
        while(mh ->next != nullptr){
            int tmp = mh->next->val + head->val;
            sum = max(sum, tmp);
            mh = mh -> next;
            head = head -> next;
        }
        return sum;
    }
};
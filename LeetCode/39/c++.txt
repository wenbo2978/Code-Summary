class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int n = candidates.size();
        vector<vector<int>> res;
        vector<int> cr(n, 0);
        vector<int> path(n, 0);
        for(int i = 0; i < candidates.size(); i ++){
            cr[i] = floor(target / candidates[i]);
        }
        backtrack(candidates, cr, res, path, target, 0, n);
        return res;
    }

    void backtrack(vector<int>& candidates, vector<int>& cr, vector<vector<int>>& res, vector<int>& path, int target, int index, int n){
        //printf("%d\n", index);
        if(target == 0){
            vector<int> tmp;
            for(int i = 0; i < n; i ++){
                int times = path[i];
                for(int j = 1; j <= times; j ++){
                    tmp.push_back(candidates[i]);
                }
            }
            res.push_back(tmp);
            return;
        }
        if(index >= n || target < 0){
            return;
        }else{
            for(int i = 0; i <= cr[index]; i ++){
                //cout << cr[index]<< endl;
                target -= i * candidates[index];
                path[index] = i;
                backtrack(candidates, cr, res, path, target, index + 1, n);
                path[index] = 0;
                target += i * candidates[index];
            }
        }
        
    }
};
class Trie {
public:

    bool flag = false;
    Trie* next[26] = {nullptr};

    Trie() {
        
    }
    
    void insert(string word) {
        Trie* node = this;
        for(int i = 0; i < word.size(); i ++){
            char c = word[i];
            if(node->next[c - 'a'] == nullptr){
                node->next[c - 'a'] = new Trie(); 
            }
            node = node->next[c - 'a'];
        }
        node->flag = true;
    }
    
    bool search(string word) {
        Trie* node = this;
        for(int i = 0; i < word.size(); i ++){
            char c = word[i];
            if(node->next[c - 'a'] == nullptr){
                return false; 
            }else{
                node = node->next[c - 'a'];
            }
            
        }
        if(node->flag == true)
            return true;
        else
            return false;
    }
    
    bool startsWith(string prefix) {
        Trie* node = this;
        for(int i = 0; i < prefix.size(); i ++){
            char c = prefix[i];
            if(node->next[c - 'a'] == nullptr){
                return false; 
            }else{
                node = node->next[c - 'a'];
            }
            
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void buildBinaryTree(TreeNode* &root, vector<int>& preorder, vector<int>& inorder, int pre_st, 
    int in_st, int length){
        /*if(length == 0)
            return;*/
        int node = -1;
        for(int i = 0; i < length; i ++){
            if(inorder[in_st + i] == preorder[pre_st]){
                node = i;
                break;
            }
        }
        if(node > 0){
            //cout << "111" << endl;
            root->left = new TreeNode(preorder[pre_st + 1]);
            if(node > 1)
                buildBinaryTree(root->left, preorder, inorder, pre_st + 1, in_st, node);
        }else{
            //cout << "222" << endl;
            root->left = nullptr;
        }
        if(node + 1 < length){
            //cout << "333" << endl;
            root->right = new TreeNode(preorder[pre_st + node + 1]);
            if(length - node > 2)
                buildBinaryTree(root->right, preorder, inorder, pre_st + node + 1, in_st + node + 1, length - node - 1);
        }else{
            //cout << "444" << endl;
            root->right = nullptr;
        }
        

    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        TreeNode* root = new TreeNode(preorder[0]);
        int pre_st = 0, in_st = 0, length = inorder.size();
        buildBinaryTree(root, preorder, inorder, pre_st, in_st, length);
        return root;
    }
};
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        stack<TreeNode*> p1, q1;
        if(p == nullptr && q == nullptr)
            return true;
        if(p == nullptr || q == nullptr)
            return false;
        p1.push(p);
        q1.push(q);
        while(!p1.empty() && !q1.empty()){
            TreeNode* t1 = p1.top();
            TreeNode* t2 = q1.top();
            p1.pop();
            q1.pop();
            if(t1->val != t2->val){
                return false;
            }
            if(t1->left != nullptr && t2->left != nullptr){
                p1.push(t1->left);
                q1.push(t2->left);
            }else if(t1->left == nullptr && t2->left == nullptr){
                ;
            }else{
                return false;
            }
            if(t1->right != nullptr && t2->right != nullptr){
                p1.push(t1->right);
                q1.push(t2->right);
            }else if(t1->right == nullptr && t2->right == nullptr){
                ;
            }else{
                return false;
            }
            
        }
        if(p1.empty() && q1.empty()){
            return true;
        }else{
            return false;
        }
        return true;
    }
};
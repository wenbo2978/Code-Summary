/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public String smallestFromLeaf(TreeNode root) {
        String table = "abcdefghijklmnopqrstuvwxyz";
        String[] path = new String[2];
        path[0] = "";
        path[1] = "";
        preOrderTraverse(root, path, table);
        
        return path[1];
    }

    public void preOrderTraverse(TreeNode root, String[] path, String table){
        if(root == null)
            return;
        path[0] = path[0].concat(table.charAt(root.val)+"");
        //System.out.println(path[0]);
        if(root.right == null && root.left == null){
            if(path[1] == ""){
                StringBuilder builder = new StringBuilder(path[0]);
                String reversedString = builder.reverse().toString();
                path[1] = reversedString;
            }else{
                StringBuilder builder = new StringBuilder(path[0]);
                String reversedString = builder.reverse().toString();
                if(reversedString.compareTo(path[1]) < 0){
                    path[1] = reversedString;
                }
            }
        }
        if(root.left != null){
            preOrderTraverse(root.left, path, table);
            path[0] = path[0].substring(0, path[0].length() - 1);
        }
        if(root.right != null){
            preOrderTraverse(root.right, path, table);
            path[0] = path[0].substring(0, path[0].length() - 1);
        }
    }
}